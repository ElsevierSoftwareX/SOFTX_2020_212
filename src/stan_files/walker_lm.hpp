
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_walker_lm_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_walker_lm");
    reader.add_event(1, 1, "include", "/chunks/common_functions.stan");
    reader.add_event(1, 0, "start", "/chunks/common_functions.stan");
    reader.add_event(247, 246, "end", "/chunks/common_functions.stan");
    reader.add_event(247, 2, "restart", "model_walker_lm");
    reader.add_event(388, 141, "end", "model_walker_lm");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type
gaussian_filter(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& a1,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& P1,
                    const T3__& Ht,
                    const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& Tt,
                    const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& Rt,
                    const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& xreg,
                    const Eigen::Matrix<T7__, Eigen::Dynamic,1>& gamma2_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 9;
        int k(0);
        (void) k;  // dummy to suppress unused var warning

        stan::math::fill(k, std::numeric_limits<int>::min());
        stan::math::assign(k,rows(xreg));
        current_statement_begin__ = 10;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,rows(y));
        current_statement_begin__ = 11;
        int m(0);
        (void) m;  // dummy to suppress unused var warning

        stan::math::fill(m, std::numeric_limits<int>::min());
        stan::math::assign(m,rows(a1));
        current_statement_begin__ = 12;
        local_scalar_t__ loglik;
        (void) loglik;  // dummy to suppress unused var warning

        stan::math::initialize(loglik, DUMMY_VAR__);
        stan::math::fill(loglik,DUMMY_VAR__);
        stan::math::assign(loglik,0.0);
        current_statement_begin__ = 14;
        validate_non_negative_index("x", "m", m);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  x(static_cast<Eigen::VectorXd::Index>(m));
        (void) x;  // dummy to suppress unused var warning

        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x,DUMMY_VAR__);
        stan::math::assign(x,a1);
        current_statement_begin__ = 15;
        validate_non_negative_index("P", "m", m);
        validate_non_negative_index("P", "m", m);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  P(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
        (void) P;  // dummy to suppress unused var warning

        stan::math::initialize(P, DUMMY_VAR__);
        stan::math::fill(P,DUMMY_VAR__);
        stan::math::assign(P,P1);


        current_statement_begin__ = 17;
        for (int t = 1; t <= n; ++t) {
            {
            current_statement_begin__ = 18;
            local_scalar_t__ F;
            (void) F;  // dummy to suppress unused var warning

            stan::math::initialize(F, DUMMY_VAR__);
            stan::math::fill(F,DUMMY_VAR__);
            stan::math::assign(F,(quad_form(stan::model::rvalue(P, stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::nil_index_list())), "P"),stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg")) + (get_base1(gamma2_y,t,"gamma2_y",1) * Ht)));


            current_statement_begin__ = 20;
            if (as_bool(logical_gt(F,9.9999999999999998e-013))) {
                {
                current_statement_begin__ = 21;
                local_scalar_t__ v;
                (void) v;  // dummy to suppress unused var warning

                stan::math::initialize(v, DUMMY_VAR__);
                stan::math::fill(v,DUMMY_VAR__);
                stan::math::assign(v,(get_base1(y,t,"y",1) - dot_product(stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg"),head(x,k))));
                current_statement_begin__ = 22;
                validate_non_negative_index("K", "m", m);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  K(static_cast<Eigen::VectorXd::Index>(m));
                (void) K;  // dummy to suppress unused var warning

                stan::math::initialize(K, DUMMY_VAR__);
                stan::math::fill(K,DUMMY_VAR__);
                stan::math::assign(K,divide(multiply(stan::model::rvalue(P, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::nil_index_list())), "P"),stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg")),F));


                current_statement_begin__ = 23;
                stan::math::assign(x, stan::model::deep_copy(multiply(Tt,add(x,multiply(K,v)))));
                current_statement_begin__ = 24;
                stan::math::assign(P, stan::model::deep_copy(quad_form_sym(subtract(P,multiply(multiply(K,transpose(K)),F)),transpose(Tt))));
                current_statement_begin__ = 25;
                for (int i = 1; i <= m; ++i) {

                    current_statement_begin__ = 26;
                    stan::model::assign(P, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                (stan::model::rvalue(P, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "P") + get_base1(Rt,t,i,"Rt",1)), 
                                "assigning variable P");
                }
                current_statement_begin__ = 28;
                stan::math::assign(loglik, (loglik - (0.5 * (stan::math::log(F) + ((v * v) / F)))));
                }
            } else {

                current_statement_begin__ = 30;
                stan::math::assign(x, stan::model::deep_copy(multiply(Tt,x)));
                current_statement_begin__ = 31;
                stan::math::assign(P, stan::model::deep_copy(quad_form_sym(P,transpose(Tt))));
                current_statement_begin__ = 32;
                for (int i = 1; i <= m; ++i) {

                    current_statement_begin__ = 33;
                    stan::model::assign(P, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                (stan::model::rvalue(P, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "P") + get_base1(Rt,t,i,"Rt",1)), 
                                "assigning variable P");
                }
            }
            }
        }
        current_statement_begin__ = 37;
        return stan::math::promote_scalar<fun_return_scalar_t__>(loglik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct gaussian_filter_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& a1,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& P1,
                    const T3__& Ht,
                    const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& Tt,
                    const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& Rt,
                    const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& xreg,
                    const Eigen::Matrix<T7__, Eigen::Dynamic,1>& gamma2_y, std::ostream* pstream__) const {
        return gaussian_filter(y, a1, P1, Ht, Tt, Rt, xreg, gamma2_y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
gaussian_smoother(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                      const Eigen::Matrix<T1__, Eigen::Dynamic,1>& a1,
                      const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& P1,
                      const T3__& Ht,
                      const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& Tt,
                      const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& Rt,
                      const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& xreg,
                      const Eigen::Matrix<T7__, Eigen::Dynamic,1>& gamma2_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 44;
        int k(0);
        (void) k;  // dummy to suppress unused var warning

        stan::math::fill(k, std::numeric_limits<int>::min());
        stan::math::assign(k,rows(xreg));
        current_statement_begin__ = 45;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,rows(y));
        current_statement_begin__ = 46;
        int m(0);
        (void) m;  // dummy to suppress unused var warning

        stan::math::fill(m, std::numeric_limits<int>::min());
        stan::math::assign(m,rows(a1));
        current_statement_begin__ = 47;
        local_scalar_t__ loglik;
        (void) loglik;  // dummy to suppress unused var warning

        stan::math::initialize(loglik, DUMMY_VAR__);
        stan::math::fill(loglik,DUMMY_VAR__);
        stan::math::assign(loglik,0.0);
        current_statement_begin__ = 48;
        validate_non_negative_index("x", "m", m);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  x(static_cast<Eigen::VectorXd::Index>(m));
        (void) x;  // dummy to suppress unused var warning

        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x,DUMMY_VAR__);
        stan::math::assign(x,a1);
        current_statement_begin__ = 49;
        validate_non_negative_index("P", "m", m);
        validate_non_negative_index("P", "m", m);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  P(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
        (void) P;  // dummy to suppress unused var warning

        stan::math::initialize(P, DUMMY_VAR__);
        stan::math::fill(P,DUMMY_VAR__);
        stan::math::assign(P,P1);
        current_statement_begin__ = 50;
        validate_non_negative_index("v", "n", n);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  v(static_cast<Eigen::VectorXd::Index>(n));
        (void) v;  // dummy to suppress unused var warning

        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v,DUMMY_VAR__);
        current_statement_begin__ = 51;
        validate_non_negative_index("F", "n", n);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  F(static_cast<Eigen::VectorXd::Index>(n));
        (void) F;  // dummy to suppress unused var warning

        stan::math::initialize(F, DUMMY_VAR__);
        stan::math::fill(F,DUMMY_VAR__);
        current_statement_begin__ = 52;
        validate_non_negative_index("K", "m", m);
        validate_non_negative_index("K", "n", n);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  K(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(n));
        (void) K;  // dummy to suppress unused var warning

        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K,DUMMY_VAR__);
        current_statement_begin__ = 53;
        validate_non_negative_index("r", "m", m);
        validate_non_negative_index("r", "(n + 1)", (n + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  r(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>((n + 1)));
        (void) r;  // dummy to suppress unused var warning

        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r,DUMMY_VAR__);
        current_statement_begin__ = 54;
        validate_non_negative_index("tmpr", "m", m);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmpr(static_cast<Eigen::VectorXd::Index>(m));
        (void) tmpr;  // dummy to suppress unused var warning

        stan::math::initialize(tmpr, DUMMY_VAR__);
        stan::math::fill(tmpr,DUMMY_VAR__);


        current_statement_begin__ = 56;
        for (int t = 1; t <= n; ++t) {

            current_statement_begin__ = 58;
            stan::model::assign(F, 
                        stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                        (quad_form(stan::model::rvalue(P, stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::nil_index_list())), "P"),stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg")) + (get_base1(gamma2_y,t,"gamma2_y",1) * Ht)), 
                        "assigning variable F");
            current_statement_begin__ = 60;
            if (as_bool(logical_gt(get_base1(F,t,"F",1),9.9999999999999998e-013))) {

                current_statement_begin__ = 61;
                stan::model::assign(v, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (get_base1(y,t,"y",1) - dot_product(stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg"),head(x,k))), 
                            "assigning variable v");
                current_statement_begin__ = 62;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            divide(multiply(stan::model::rvalue(P, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::nil_index_list())), "P"),stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg")),get_base1(F,t,"F",1)), 
                            "assigning variable K");
                current_statement_begin__ = 63;
                stan::math::assign(x, stan::model::deep_copy(multiply(Tt,add(x,multiply(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "K"),get_base1(v,t,"v",1))))));
                current_statement_begin__ = 64;
                stan::math::assign(P, stan::model::deep_copy(quad_form_sym(subtract(P,multiply(multiply(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "K"),transpose(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "K"))),get_base1(F,t,"F",1))),transpose(Tt))));
                current_statement_begin__ = 65;
                for (int i = 1; i <= m; ++i) {

                    current_statement_begin__ = 66;
                    stan::model::assign(P, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                (stan::model::rvalue(P, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "P") + get_base1(Rt,t,i,"Rt",1)), 
                                "assigning variable P");
                }
                current_statement_begin__ = 68;
                stan::math::assign(loglik, (loglik - (0.5 * (stan::math::log(get_base1(F,t,"F",1)) + ((get_base1(v,t,"v",1) * get_base1(v,t,"v",1)) / get_base1(F,t,"F",1))))));
            } else {

                current_statement_begin__ = 70;
                stan::math::assign(x, stan::model::deep_copy(multiply(Tt,x)));
                current_statement_begin__ = 71;
                stan::math::assign(P, stan::model::deep_copy(quad_form_sym(P,transpose(Tt))));
                current_statement_begin__ = 72;
                for (int i = 1; i <= m; ++i) {

                    current_statement_begin__ = 73;
                    stan::model::assign(P, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                (stan::model::rvalue(P, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "P") + get_base1(Rt,t,i,"Rt",1)), 
                                "assigning variable P");
                }
            }
        }
        current_statement_begin__ = 78;
        stan::model::assign(r, 
                    stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((n + 1)), stan::model::nil_index_list())), 
                    rep_vector(0.0,m), 
                    "assigning variable r");
        current_statement_begin__ = 79;
        for (int tt = 1; tt <= n; ++tt) {
            {
            current_statement_begin__ = 80;
            int t(0);
            (void) t;  // dummy to suppress unused var warning

            stan::math::fill(t, std::numeric_limits<int>::min());
            stan::math::assign(t,((n + 1) - tt));
            current_statement_begin__ = 81;
            validate_non_negative_index("tmp", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmp(static_cast<Eigen::VectorXd::Index>(m));
            (void) tmp;  // dummy to suppress unused var warning

            stan::math::initialize(tmp, DUMMY_VAR__);
            stan::math::fill(tmp,DUMMY_VAR__);
            stan::math::assign(tmp,stan::model::rvalue(r, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((t + 1)), stan::model::nil_index_list())), "r"));


            current_statement_begin__ = 82;
            if (as_bool(logical_gt(get_base1(F,t,"F",1),9.9999999999999998e-013))) {
                {
                current_statement_begin__ = 83;
                validate_non_negative_index("tmp2", "m", m);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmp2(static_cast<Eigen::VectorXd::Index>(m));
                (void) tmp2;  // dummy to suppress unused var warning

                stan::math::initialize(tmp2, DUMMY_VAR__);
                stan::math::fill(tmp2,DUMMY_VAR__);
                stan::math::assign(tmp2,rep_vector(0.0,m));


                current_statement_begin__ = 84;
                stan::model::assign(tmp2, 
                            stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::nil_index_list()), 
                            stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg"), 
                            "assigning variable tmp2");
                current_statement_begin__ = 85;
                stan::model::assign(r, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            add(divide(multiply(tmp2,get_base1(v,t,"v",1)),get_base1(F,t,"F",1)),multiply(transpose(subtract(Tt,multiply(multiply(Tt,stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "K")),transpose(tmp2)))),tmp)), 
                            "assigning variable r");
                }
            } else {

                current_statement_begin__ = 87;
                stan::model::assign(r, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            multiply(transpose(Tt),tmp), 
                            "assigning variable r");
            }
            }
        }
        current_statement_begin__ = 91;
        stan::math::assign(tmpr, stan::model::rvalue(r, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "r"));
        current_statement_begin__ = 92;
        stan::model::assign(r, 
                    stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    add(a1,multiply(P1,tmpr)), 
                    "assigning variable r");
        current_statement_begin__ = 93;
        for (int t = 2; t <= n; ++t) {
            {
            current_statement_begin__ = 94;
            validate_non_negative_index("tmp", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmp(static_cast<Eigen::VectorXd::Index>(m));
            (void) tmp;  // dummy to suppress unused var warning

            stan::math::initialize(tmp, DUMMY_VAR__);
            stan::math::fill(tmp,DUMMY_VAR__);
            stan::math::assign(tmp,stan::model::rvalue(r, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::nil_index_list())), "r"));
            current_statement_begin__ = 95;
            validate_non_negative_index("tmp2", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmp2(static_cast<Eigen::VectorXd::Index>(m));
            (void) tmp2;  // dummy to suppress unused var warning

            stan::math::initialize(tmp2, DUMMY_VAR__);
            stan::math::fill(tmp2,DUMMY_VAR__);
            stan::math::assign(tmp2,stan::model::rvalue(r, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "r"));


            current_statement_begin__ = 96;
            stan::model::assign(r, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                        add(multiply(Tt,tmp),elt_multiply(transpose(stan::model::rvalue(Rt, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "Rt")),tmp2)), 
                        "assigning variable r");
            }
        }
        current_statement_begin__ = 98;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::model::rvalue(r, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::nil_index_list())), "r"));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct gaussian_smoother_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                      const Eigen::Matrix<T1__, Eigen::Dynamic,1>& a1,
                      const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& P1,
                      const T3__& Ht,
                      const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& Tt,
                      const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& Rt,
                      const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& xreg,
                      const Eigen::Matrix<T7__, Eigen::Dynamic,1>& gamma2_y, std::ostream* pstream__) const {
        return gaussian_smoother(y, a1, P1, Ht, Tt, Rt, xreg, gamma2_y, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T9__, typename T10__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T9__, typename boost::math::tools::promote_args<T10__>::type>::type>::type, Eigen::Dynamic,1>
glm_approx_loglik(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                      const Eigen::Matrix<T1__, Eigen::Dynamic,1>& a1,
                      const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& P1,
                      const Eigen::Matrix<T3__, Eigen::Dynamic,1>& Ht,
                      const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& Tt,
                      const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& Rt,
                      const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& xreg,
                      const int& distribution,
                      const std::vector<int>& u,
                      const Eigen::Matrix<T9__, Eigen::Dynamic,1>& y_original,
                      const Eigen::Matrix<T10__, Eigen::Dynamic,1>& xbeta_fixed, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T9__, typename boost::math::tools::promote_args<T10__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 110;
        int k(0);
        (void) k;  // dummy to suppress unused var warning

        stan::math::fill(k, std::numeric_limits<int>::min());
        stan::math::assign(k,rows(xreg));
        current_statement_begin__ = 111;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,rows(y));
        current_statement_begin__ = 112;
        int m(0);
        (void) m;  // dummy to suppress unused var warning

        stan::math::fill(m, std::numeric_limits<int>::min());
        stan::math::assign(m,rows(a1));
        current_statement_begin__ = 113;
        validate_non_negative_index("loglik", "2", 2);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  loglik(static_cast<Eigen::VectorXd::Index>(2));
        (void) loglik;  // dummy to suppress unused var warning

        stan::math::initialize(loglik, DUMMY_VAR__);
        stan::math::fill(loglik,DUMMY_VAR__);
        stan::math::assign(loglik,rep_vector(0.0,2));
        current_statement_begin__ = 114;
        validate_non_negative_index("x", "m", m);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  x(static_cast<Eigen::VectorXd::Index>(m));
        (void) x;  // dummy to suppress unused var warning

        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x,DUMMY_VAR__);
        stan::math::assign(x,a1);
        current_statement_begin__ = 115;
        validate_non_negative_index("P", "m", m);
        validate_non_negative_index("P", "m", m);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  P(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
        (void) P;  // dummy to suppress unused var warning

        stan::math::initialize(P, DUMMY_VAR__);
        stan::math::fill(P,DUMMY_VAR__);
        stan::math::assign(P,P1);
        current_statement_begin__ = 116;
        validate_non_negative_index("v", "n", n);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  v(static_cast<Eigen::VectorXd::Index>(n));
        (void) v;  // dummy to suppress unused var warning

        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v,DUMMY_VAR__);
        current_statement_begin__ = 117;
        validate_non_negative_index("F", "n", n);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  F(static_cast<Eigen::VectorXd::Index>(n));
        (void) F;  // dummy to suppress unused var warning

        stan::math::initialize(F, DUMMY_VAR__);
        stan::math::fill(F,DUMMY_VAR__);
        current_statement_begin__ = 118;
        validate_non_negative_index("K", "m", m);
        validate_non_negative_index("K", "n", n);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  K(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(n));
        (void) K;  // dummy to suppress unused var warning

        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K,DUMMY_VAR__);
        current_statement_begin__ = 119;
        validate_non_negative_index("r", "m", m);
        validate_non_negative_index("r", "(n + 1)", (n + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  r(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>((n + 1)));
        (void) r;  // dummy to suppress unused var warning

        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r,DUMMY_VAR__);
        current_statement_begin__ = 120;
        validate_non_negative_index("tmpr", "m", m);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmpr(static_cast<Eigen::VectorXd::Index>(m));
        (void) tmpr;  // dummy to suppress unused var warning

        stan::math::initialize(tmpr, DUMMY_VAR__);
        stan::math::fill(tmpr,DUMMY_VAR__);


        current_statement_begin__ = 122;
        for (int t = 1; t <= n; ++t) {

            current_statement_begin__ = 124;
            stan::model::assign(F, 
                        stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                        (quad_form(stan::model::rvalue(P, stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::nil_index_list())), "P"),stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg")) + get_base1(Ht,t,"Ht",1)), 
                        "assigning variable F");
            current_statement_begin__ = 126;
            if (as_bool(logical_gt(get_base1(F,t,"F",1),9.9999999999999998e-013))) {

                current_statement_begin__ = 127;
                stan::model::assign(v, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (get_base1(y,t,"y",1) - dot_product(stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg"),head(x,k))), 
                            "assigning variable v");
                current_statement_begin__ = 128;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            divide(multiply(stan::model::rvalue(P, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::nil_index_list())), "P"),stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg")),get_base1(F,t,"F",1)), 
                            "assigning variable K");
                current_statement_begin__ = 129;
                stan::math::assign(x, stan::model::deep_copy(multiply(Tt,add(x,multiply(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "K"),get_base1(v,t,"v",1))))));
                current_statement_begin__ = 130;
                stan::math::assign(P, stan::model::deep_copy(quad_form_sym(subtract(P,multiply(multiply(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "K"),transpose(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "K"))),get_base1(F,t,"F",1))),transpose(Tt))));
                current_statement_begin__ = 131;
                for (int i = 1; i <= m; ++i) {

                    current_statement_begin__ = 132;
                    stan::model::assign(P, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                (stan::model::rvalue(P, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "P") + get_base1(Rt,t,i,"Rt",1)), 
                                "assigning variable P");
                }
                current_statement_begin__ = 134;
                stan::model::assign(loglik, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (stan::model::rvalue(loglik, stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), "loglik") - (0.5 * (stan::math::log(get_base1(F,t,"F",1)) + ((get_base1(v,t,"v",1) * get_base1(v,t,"v",1)) / get_base1(F,t,"F",1))))), 
                            "assigning variable loglik");
            } else {

                current_statement_begin__ = 136;
                stan::math::assign(x, stan::model::deep_copy(multiply(Tt,x)));
                current_statement_begin__ = 137;
                stan::math::assign(P, stan::model::deep_copy(quad_form_sym(P,transpose(Tt))));
                current_statement_begin__ = 138;
                for (int i = 1; i <= m; ++i) {

                    current_statement_begin__ = 139;
                    stan::model::assign(P, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                (stan::model::rvalue(P, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "P") + get_base1(Rt,t,i,"Rt",1)), 
                                "assigning variable P");
                }
            }
        }
        current_statement_begin__ = 144;
        stan::model::assign(r, 
                    stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((n + 1)), stan::model::nil_index_list())), 
                    rep_vector(0.0,m), 
                    "assigning variable r");
        current_statement_begin__ = 145;
        for (int tt = 1; tt <= n; ++tt) {
            {
            current_statement_begin__ = 146;
            int t(0);
            (void) t;  // dummy to suppress unused var warning

            stan::math::fill(t, std::numeric_limits<int>::min());
            stan::math::assign(t,((n + 1) - tt));
            current_statement_begin__ = 147;
            validate_non_negative_index("tmp", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmp(static_cast<Eigen::VectorXd::Index>(m));
            (void) tmp;  // dummy to suppress unused var warning

            stan::math::initialize(tmp, DUMMY_VAR__);
            stan::math::fill(tmp,DUMMY_VAR__);
            stan::math::assign(tmp,stan::model::rvalue(r, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((t + 1)), stan::model::nil_index_list())), "r"));


            current_statement_begin__ = 148;
            if (as_bool(logical_gt(get_base1(F,t,"F",1),9.9999999999999998e-013))) {
                {
                current_statement_begin__ = 149;
                validate_non_negative_index("tmp2", "m", m);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmp2(static_cast<Eigen::VectorXd::Index>(m));
                (void) tmp2;  // dummy to suppress unused var warning

                stan::math::initialize(tmp2, DUMMY_VAR__);
                stan::math::fill(tmp2,DUMMY_VAR__);
                stan::math::assign(tmp2,rep_vector(0.0,m));


                current_statement_begin__ = 150;
                stan::model::assign(tmp2, 
                            stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::nil_index_list()), 
                            stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg"), 
                            "assigning variable tmp2");
                current_statement_begin__ = 151;
                stan::model::assign(r, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            add(divide(multiply(tmp2,get_base1(v,t,"v",1)),get_base1(F,t,"F",1)),multiply(transpose(subtract(Tt,multiply(multiply(Tt,stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "K")),transpose(tmp2)))),tmp)), 
                            "assigning variable r");
                }
            } else {

                current_statement_begin__ = 153;
                stan::model::assign(r, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            multiply(transpose(Tt),tmp), 
                            "assigning variable r");
            }
            }
        }
        current_statement_begin__ = 157;
        stan::math::assign(tmpr, stan::model::rvalue(r, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "r"));
        current_statement_begin__ = 158;
        stan::model::assign(r, 
                    stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    add(a1,multiply(P1,tmpr)), 
                    "assigning variable r");
        current_statement_begin__ = 159;
        for (int t = 2; t <= n; ++t) {
            {
            current_statement_begin__ = 160;
            validate_non_negative_index("tmp", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmp(static_cast<Eigen::VectorXd::Index>(m));
            (void) tmp;  // dummy to suppress unused var warning

            stan::math::initialize(tmp, DUMMY_VAR__);
            stan::math::fill(tmp,DUMMY_VAR__);
            stan::math::assign(tmp,stan::model::rvalue(r, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::nil_index_list())), "r"));
            current_statement_begin__ = 161;
            validate_non_negative_index("tmp2", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmp2(static_cast<Eigen::VectorXd::Index>(m));
            (void) tmp2;  // dummy to suppress unused var warning

            stan::math::initialize(tmp2, DUMMY_VAR__);
            stan::math::fill(tmp2,DUMMY_VAR__);
            stan::math::assign(tmp2,stan::model::rvalue(r, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "r"));


            current_statement_begin__ = 162;
            stan::model::assign(r, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                        add(multiply(Tt,tmp),elt_multiply(transpose(stan::model::rvalue(Rt, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "Rt")),tmp2)), 
                        "assigning variable r");
            }
        }
        current_statement_begin__ = 167;
        if (as_bool(logical_eq(distribution,1))) {

            current_statement_begin__ = 168;
            for (int t = 1; t <= n; ++t) {
                {
                current_statement_begin__ = 169;
                local_scalar_t__ xbeta_rw;
                (void) xbeta_rw;  // dummy to suppress unused var warning

                stan::math::initialize(xbeta_rw, DUMMY_VAR__);
                stan::math::fill(xbeta_rw,DUMMY_VAR__);
                stan::math::assign(xbeta_rw,dot_product(stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg"),stan::model::rvalue(r, stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "r")));


                current_statement_begin__ = 170;
                stan::model::assign(loglik, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            (stan::model::rvalue(loglik, stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), "loglik") + (((get_base1(y_original,t,"y_original",1) * (xbeta_rw + get_base1(xbeta_fixed,t,"xbeta_fixed",1))) - (get_base1(u,t,"u",1) * stan::math::exp((xbeta_rw + get_base1(xbeta_fixed,t,"xbeta_fixed",1))))) + ((0.5 * pow((get_base1(y,t,"y",1) - xbeta_rw),2)) / get_base1(Ht,t,"Ht",1)))), 
                            "assigning variable loglik");
                }
            }
        } else {

            current_statement_begin__ = 175;
            for (int t = 1; t <= n; ++t) {
                {
                current_statement_begin__ = 176;
                local_scalar_t__ xbeta_rw;
                (void) xbeta_rw;  // dummy to suppress unused var warning

                stan::math::initialize(xbeta_rw, DUMMY_VAR__);
                stan::math::fill(xbeta_rw,DUMMY_VAR__);
                stan::math::assign(xbeta_rw,dot_product(stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg"),stan::model::rvalue(r, stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "r")));


                current_statement_begin__ = 177;
                stan::model::assign(loglik, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            (stan::model::rvalue(loglik, stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), "loglik") + (((get_base1(y_original,t,"y_original",1) * (xbeta_rw + get_base1(xbeta_fixed,t,"xbeta_fixed",1))) - (get_base1(u,t,"u",1) * stan::math::log1p(stan::math::exp((xbeta_rw + get_base1(xbeta_fixed,t,"xbeta_fixed",1)))))) + ((0.5 * pow((get_base1(y,t,"y",1) - xbeta_rw),2)) / get_base1(Ht,t,"Ht",1)))), 
                            "assigning variable loglik");
                }
            }
        }
        current_statement_begin__ = 182;
        return stan::math::promote_scalar<fun_return_scalar_t__>(loglik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct glm_approx_loglik_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T9__, typename T10__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T9__, typename boost::math::tools::promote_args<T10__>::type>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                      const Eigen::Matrix<T1__, Eigen::Dynamic,1>& a1,
                      const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& P1,
                      const Eigen::Matrix<T3__, Eigen::Dynamic,1>& Ht,
                      const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& Tt,
                      const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& Rt,
                      const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& xreg,
                      const int& distribution,
                      const std::vector<int>& u,
                      const Eigen::Matrix<T9__, Eigen::Dynamic,1>& y_original,
                      const Eigen::Matrix<T10__, Eigen::Dynamic,1>& xbeta_fixed, std::ostream* pstream__) const {
        return glm_approx_loglik(y, a1, P1, Ht, Tt, Rt, xreg, distribution, u, y_original, xbeta_fixed, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
glm_approx_smoother(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& a1,
                        const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& P1,
                        const Eigen::Matrix<T3__, Eigen::Dynamic,1>& Ht,
                        const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& Tt,
                        const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& Rt,
                        const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& xreg, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 192;
        int k(0);
        (void) k;  // dummy to suppress unused var warning

        stan::math::fill(k, std::numeric_limits<int>::min());
        stan::math::assign(k,rows(xreg));
        current_statement_begin__ = 193;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,rows(y));
        current_statement_begin__ = 194;
        int m(0);
        (void) m;  // dummy to suppress unused var warning

        stan::math::fill(m, std::numeric_limits<int>::min());
        stan::math::assign(m,rows(a1));
        current_statement_begin__ = 195;
        validate_non_negative_index("x", "m", m);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  x(static_cast<Eigen::VectorXd::Index>(m));
        (void) x;  // dummy to suppress unused var warning

        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x,DUMMY_VAR__);
        stan::math::assign(x,a1);
        current_statement_begin__ = 196;
        validate_non_negative_index("P", "m", m);
        validate_non_negative_index("P", "m", m);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  P(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
        (void) P;  // dummy to suppress unused var warning

        stan::math::initialize(P, DUMMY_VAR__);
        stan::math::fill(P,DUMMY_VAR__);
        stan::math::assign(P,P1);
        current_statement_begin__ = 197;
        validate_non_negative_index("v", "n", n);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  v(static_cast<Eigen::VectorXd::Index>(n));
        (void) v;  // dummy to suppress unused var warning

        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v,DUMMY_VAR__);
        current_statement_begin__ = 198;
        validate_non_negative_index("F", "n", n);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  F(static_cast<Eigen::VectorXd::Index>(n));
        (void) F;  // dummy to suppress unused var warning

        stan::math::initialize(F, DUMMY_VAR__);
        stan::math::fill(F,DUMMY_VAR__);
        current_statement_begin__ = 199;
        validate_non_negative_index("K", "m", m);
        validate_non_negative_index("K", "n", n);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  K(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(n));
        (void) K;  // dummy to suppress unused var warning

        stan::math::initialize(K, DUMMY_VAR__);
        stan::math::fill(K,DUMMY_VAR__);
        current_statement_begin__ = 200;
        validate_non_negative_index("r", "m", m);
        validate_non_negative_index("r", "(n + 1)", (n + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  r(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>((n + 1)));
        (void) r;  // dummy to suppress unused var warning

        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r,DUMMY_VAR__);
        current_statement_begin__ = 201;
        validate_non_negative_index("tmpr", "m", m);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmpr(static_cast<Eigen::VectorXd::Index>(m));
        (void) tmpr;  // dummy to suppress unused var warning

        stan::math::initialize(tmpr, DUMMY_VAR__);
        stan::math::fill(tmpr,DUMMY_VAR__);


        current_statement_begin__ = 203;
        for (int t = 1; t <= n; ++t) {

            current_statement_begin__ = 205;
            stan::model::assign(F, 
                        stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                        (quad_form(stan::model::rvalue(P, stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::nil_index_list())), "P"),stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg")) + get_base1(Ht,t,"Ht",1)), 
                        "assigning variable F");
            current_statement_begin__ = 207;
            if (as_bool(logical_gt(get_base1(F,t,"F",1),9.9999999999999998e-013))) {

                current_statement_begin__ = 208;
                stan::model::assign(v, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (get_base1(y,t,"y",1) - dot_product(stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg"),head(x,k))), 
                            "assigning variable v");
                current_statement_begin__ = 209;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            divide(multiply(stan::model::rvalue(P, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::nil_index_list())), "P"),stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg")),get_base1(F,t,"F",1)), 
                            "assigning variable K");
                current_statement_begin__ = 210;
                stan::math::assign(x, stan::model::deep_copy(multiply(Tt,add(x,multiply(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "K"),get_base1(v,t,"v",1))))));
                current_statement_begin__ = 211;
                stan::math::assign(P, stan::model::deep_copy(quad_form_sym(subtract(P,multiply(multiply(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "K"),transpose(stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "K"))),get_base1(F,t,"F",1))),transpose(Tt))));
                current_statement_begin__ = 212;
                for (int i = 1; i <= m; ++i) {

                    current_statement_begin__ = 213;
                    stan::model::assign(P, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                (stan::model::rvalue(P, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "P") + get_base1(Rt,t,i,"Rt",1)), 
                                "assigning variable P");
                }
            } else {

                current_statement_begin__ = 216;
                stan::math::assign(x, stan::model::deep_copy(multiply(Tt,x)));
                current_statement_begin__ = 217;
                stan::math::assign(P, stan::model::deep_copy(quad_form_sym(P,transpose(Tt))));
                current_statement_begin__ = 218;
                for (int i = 1; i <= m; ++i) {

                    current_statement_begin__ = 219;
                    stan::model::assign(P, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                (stan::model::rvalue(P, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "P") + get_base1(Rt,t,i,"Rt",1)), 
                                "assigning variable P");
                }
            }
        }
        current_statement_begin__ = 224;
        stan::model::assign(r, 
                    stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((n + 1)), stan::model::nil_index_list())), 
                    rep_vector(0.0,m), 
                    "assigning variable r");
        current_statement_begin__ = 225;
        for (int tt = 1; tt <= n; ++tt) {
            {
            current_statement_begin__ = 226;
            int t(0);
            (void) t;  // dummy to suppress unused var warning

            stan::math::fill(t, std::numeric_limits<int>::min());
            stan::math::assign(t,((n + 1) - tt));
            current_statement_begin__ = 227;
            validate_non_negative_index("tmp", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmp(static_cast<Eigen::VectorXd::Index>(m));
            (void) tmp;  // dummy to suppress unused var warning

            stan::math::initialize(tmp, DUMMY_VAR__);
            stan::math::fill(tmp,DUMMY_VAR__);
            stan::math::assign(tmp,stan::model::rvalue(r, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((t + 1)), stan::model::nil_index_list())), "r"));


            current_statement_begin__ = 228;
            if (as_bool(logical_gt(get_base1(F,t,"F",1),9.9999999999999998e-013))) {
                {
                current_statement_begin__ = 229;
                validate_non_negative_index("tmp2", "m", m);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmp2(static_cast<Eigen::VectorXd::Index>(m));
                (void) tmp2;  // dummy to suppress unused var warning

                stan::math::initialize(tmp2, DUMMY_VAR__);
                stan::math::fill(tmp2,DUMMY_VAR__);
                stan::math::assign(tmp2,rep_vector(0.0,m));


                current_statement_begin__ = 230;
                stan::model::assign(tmp2, 
                            stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::nil_index_list()), 
                            stan::model::rvalue(xreg, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg"), 
                            "assigning variable tmp2");
                current_statement_begin__ = 231;
                stan::model::assign(r, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            add(divide(multiply(tmp2,get_base1(v,t,"v",1)),get_base1(F,t,"F",1)),multiply(transpose(subtract(Tt,multiply(multiply(Tt,stan::model::rvalue(K, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "K")),transpose(tmp2)))),tmp)), 
                            "assigning variable r");
                }
            } else {

                current_statement_begin__ = 233;
                stan::model::assign(r, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            multiply(transpose(Tt),tmp), 
                            "assigning variable r");
            }
            }
        }
        current_statement_begin__ = 237;
        stan::math::assign(tmpr, stan::model::rvalue(r, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "r"));
        current_statement_begin__ = 238;
        stan::model::assign(r, 
                    stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    add(a1,multiply(P1,tmpr)), 
                    "assigning variable r");
        current_statement_begin__ = 239;
        for (int t = 2; t <= n; ++t) {
            {
            current_statement_begin__ = 240;
            validate_non_negative_index("tmp", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmp(static_cast<Eigen::VectorXd::Index>(m));
            (void) tmp;  // dummy to suppress unused var warning

            stan::math::initialize(tmp, DUMMY_VAR__);
            stan::math::fill(tmp,DUMMY_VAR__);
            stan::math::assign(tmp,stan::model::rvalue(r, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::nil_index_list())), "r"));
            current_statement_begin__ = 241;
            validate_non_negative_index("tmp2", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  tmp2(static_cast<Eigen::VectorXd::Index>(m));
            (void) tmp2;  // dummy to suppress unused var warning

            stan::math::initialize(tmp2, DUMMY_VAR__);
            stan::math::fill(tmp2,DUMMY_VAR__);
            stan::math::assign(tmp2,stan::model::rvalue(r, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "r"));


            current_statement_begin__ = 242;
            stan::model::assign(r, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                        add(multiply(Tt,tmp),elt_multiply(transpose(stan::model::rvalue(Rt, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "Rt")),tmp2)), 
                        "assigning variable r");
            }
        }
        current_statement_begin__ = 245;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::model::rvalue(r, stan::model::cons_list(stan::model::index_min_max(1, m), stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::nil_index_list())), "r"));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct glm_approx_smoother_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& a1,
                        const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& P1,
                        const Eigen::Matrix<T3__, Eigen::Dynamic,1>& Ht,
                        const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& Tt,
                        const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& Rt,
                        const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& xreg, std::ostream* pstream__) const {
        return glm_approx_smoother(y, a1, P1, Ht, Tt, Rt, xreg, pstream__);
    }
};

#include <meta_header.hpp>
 class model_walker_lm : public prob_grad {
private:
    int k_fixed;
    int k_rw1;
    int k_rw2;
    int m;
    int k;
    int n;
    matrix_d xreg_fixed;
    matrix_d xreg_rw;
    vector_d y;
    double sigma_y_mean;
    double sigma_y_sd;
    double beta_fixed_mean;
    double beta_rw1_mean;
    double beta_rw2_mean;
    double beta_fixed_sd;
    double beta_rw1_sd;
    double beta_rw2_sd;
    double sigma_rw1_mean;
    double sigma_rw2_mean;
    double sigma_rw1_sd;
    double sigma_rw2_sd;
    double slope_mean;
    double slope_sd;
    vector_d gamma_y;
    matrix_d gamma_rw1;
    matrix_d gamma_rw2;
    vector_d a1;
    matrix_d P1;
    matrix_d Tt;
    vector_d gamma2_y;
public:
    model_walker_lm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_walker_lm(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_walker_lm_namespace::model_walker_lm";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 251;
            context__.validate_dims("data initialization", "k_fixed", "int", context__.to_vec());
            k_fixed = int(0);
            vals_i__ = context__.vals_i("k_fixed");
            pos__ = 0;
            k_fixed = vals_i__[pos__++];
            current_statement_begin__ = 252;
            context__.validate_dims("data initialization", "k_rw1", "int", context__.to_vec());
            k_rw1 = int(0);
            vals_i__ = context__.vals_i("k_rw1");
            pos__ = 0;
            k_rw1 = vals_i__[pos__++];
            current_statement_begin__ = 253;
            context__.validate_dims("data initialization", "k_rw2", "int", context__.to_vec());
            k_rw2 = int(0);
            vals_i__ = context__.vals_i("k_rw2");
            pos__ = 0;
            k_rw2 = vals_i__[pos__++];
            current_statement_begin__ = 254;
            context__.validate_dims("data initialization", "m", "int", context__.to_vec());
            m = int(0);
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            m = vals_i__[pos__++];
            current_statement_begin__ = 255;
            context__.validate_dims("data initialization", "k", "int", context__.to_vec());
            k = int(0);
            vals_i__ = context__.vals_i("k");
            pos__ = 0;
            k = vals_i__[pos__++];
            current_statement_begin__ = 256;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            current_statement_begin__ = 257;
            validate_non_negative_index("xreg_fixed", "n", n);
            validate_non_negative_index("xreg_fixed", "k_fixed", k_fixed);
            context__.validate_dims("data initialization", "xreg_fixed", "matrix_d", context__.to_vec(n,k_fixed));
            validate_non_negative_index("xreg_fixed", "n", n);
            validate_non_negative_index("xreg_fixed", "k_fixed", k_fixed);
            xreg_fixed = matrix_d(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(k_fixed));
            vals_r__ = context__.vals_r("xreg_fixed");
            pos__ = 0;
            size_t xreg_fixed_m_mat_lim__ = n;
            size_t xreg_fixed_n_mat_lim__ = k_fixed;
            for (size_t n_mat__ = 0; n_mat__ < xreg_fixed_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < xreg_fixed_m_mat_lim__; ++m_mat__) {
                    xreg_fixed(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 258;
            validate_non_negative_index("xreg_rw", "k", k);
            validate_non_negative_index("xreg_rw", "n", n);
            context__.validate_dims("data initialization", "xreg_rw", "matrix_d", context__.to_vec(k,n));
            validate_non_negative_index("xreg_rw", "k", k);
            validate_non_negative_index("xreg_rw", "n", n);
            xreg_rw = matrix_d(static_cast<Eigen::VectorXd::Index>(k),static_cast<Eigen::VectorXd::Index>(n));
            vals_r__ = context__.vals_r("xreg_rw");
            pos__ = 0;
            size_t xreg_rw_m_mat_lim__ = k;
            size_t xreg_rw_n_mat_lim__ = n;
            for (size_t n_mat__ = 0; n_mat__ < xreg_rw_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < xreg_rw_m_mat_lim__; ++m_mat__) {
                    xreg_rw(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 259;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(n));
            validate_non_negative_index("y", "n", n);
            y = vector_d(static_cast<Eigen::VectorXd::Index>(n));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_i_vec_lim__ = n;
            for (size_t i_vec__ = 0; i_vec__ < y_i_vec_lim__; ++i_vec__) {
                y[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 260;
            context__.validate_dims("data initialization", "sigma_y_mean", "double", context__.to_vec());
            sigma_y_mean = double(0);
            vals_r__ = context__.vals_r("sigma_y_mean");
            pos__ = 0;
            sigma_y_mean = vals_r__[pos__++];
            current_statement_begin__ = 261;
            context__.validate_dims("data initialization", "sigma_y_sd", "double", context__.to_vec());
            sigma_y_sd = double(0);
            vals_r__ = context__.vals_r("sigma_y_sd");
            pos__ = 0;
            sigma_y_sd = vals_r__[pos__++];
            current_statement_begin__ = 263;
            context__.validate_dims("data initialization", "beta_fixed_mean", "double", context__.to_vec());
            beta_fixed_mean = double(0);
            vals_r__ = context__.vals_r("beta_fixed_mean");
            pos__ = 0;
            beta_fixed_mean = vals_r__[pos__++];
            current_statement_begin__ = 264;
            context__.validate_dims("data initialization", "beta_rw1_mean", "double", context__.to_vec());
            beta_rw1_mean = double(0);
            vals_r__ = context__.vals_r("beta_rw1_mean");
            pos__ = 0;
            beta_rw1_mean = vals_r__[pos__++];
            current_statement_begin__ = 265;
            context__.validate_dims("data initialization", "beta_rw2_mean", "double", context__.to_vec());
            beta_rw2_mean = double(0);
            vals_r__ = context__.vals_r("beta_rw2_mean");
            pos__ = 0;
            beta_rw2_mean = vals_r__[pos__++];
            current_statement_begin__ = 266;
            context__.validate_dims("data initialization", "beta_fixed_sd", "double", context__.to_vec());
            beta_fixed_sd = double(0);
            vals_r__ = context__.vals_r("beta_fixed_sd");
            pos__ = 0;
            beta_fixed_sd = vals_r__[pos__++];
            current_statement_begin__ = 267;
            context__.validate_dims("data initialization", "beta_rw1_sd", "double", context__.to_vec());
            beta_rw1_sd = double(0);
            vals_r__ = context__.vals_r("beta_rw1_sd");
            pos__ = 0;
            beta_rw1_sd = vals_r__[pos__++];
            current_statement_begin__ = 268;
            context__.validate_dims("data initialization", "beta_rw2_sd", "double", context__.to_vec());
            beta_rw2_sd = double(0);
            vals_r__ = context__.vals_r("beta_rw2_sd");
            pos__ = 0;
            beta_rw2_sd = vals_r__[pos__++];
            current_statement_begin__ = 270;
            context__.validate_dims("data initialization", "sigma_rw1_mean", "double", context__.to_vec());
            sigma_rw1_mean = double(0);
            vals_r__ = context__.vals_r("sigma_rw1_mean");
            pos__ = 0;
            sigma_rw1_mean = vals_r__[pos__++];
            current_statement_begin__ = 271;
            context__.validate_dims("data initialization", "sigma_rw2_mean", "double", context__.to_vec());
            sigma_rw2_mean = double(0);
            vals_r__ = context__.vals_r("sigma_rw2_mean");
            pos__ = 0;
            sigma_rw2_mean = vals_r__[pos__++];
            current_statement_begin__ = 272;
            context__.validate_dims("data initialization", "sigma_rw1_sd", "double", context__.to_vec());
            sigma_rw1_sd = double(0);
            vals_r__ = context__.vals_r("sigma_rw1_sd");
            pos__ = 0;
            sigma_rw1_sd = vals_r__[pos__++];
            current_statement_begin__ = 273;
            context__.validate_dims("data initialization", "sigma_rw2_sd", "double", context__.to_vec());
            sigma_rw2_sd = double(0);
            vals_r__ = context__.vals_r("sigma_rw2_sd");
            pos__ = 0;
            sigma_rw2_sd = vals_r__[pos__++];
            current_statement_begin__ = 275;
            context__.validate_dims("data initialization", "slope_mean", "double", context__.to_vec());
            slope_mean = double(0);
            vals_r__ = context__.vals_r("slope_mean");
            pos__ = 0;
            slope_mean = vals_r__[pos__++];
            current_statement_begin__ = 276;
            context__.validate_dims("data initialization", "slope_sd", "double", context__.to_vec());
            slope_sd = double(0);
            vals_r__ = context__.vals_r("slope_sd");
            pos__ = 0;
            slope_sd = vals_r__[pos__++];
            current_statement_begin__ = 277;
            validate_non_negative_index("gamma_y", "n", n);
            context__.validate_dims("data initialization", "gamma_y", "vector_d", context__.to_vec(n));
            validate_non_negative_index("gamma_y", "n", n);
            gamma_y = vector_d(static_cast<Eigen::VectorXd::Index>(n));
            vals_r__ = context__.vals_r("gamma_y");
            pos__ = 0;
            size_t gamma_y_i_vec_lim__ = n;
            for (size_t i_vec__ = 0; i_vec__ < gamma_y_i_vec_lim__; ++i_vec__) {
                gamma_y[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 278;
            validate_non_negative_index("gamma_rw1", "k_rw1", k_rw1);
            validate_non_negative_index("gamma_rw1", "n", n);
            context__.validate_dims("data initialization", "gamma_rw1", "matrix_d", context__.to_vec(k_rw1,n));
            validate_non_negative_index("gamma_rw1", "k_rw1", k_rw1);
            validate_non_negative_index("gamma_rw1", "n", n);
            gamma_rw1 = matrix_d(static_cast<Eigen::VectorXd::Index>(k_rw1),static_cast<Eigen::VectorXd::Index>(n));
            vals_r__ = context__.vals_r("gamma_rw1");
            pos__ = 0;
            size_t gamma_rw1_m_mat_lim__ = k_rw1;
            size_t gamma_rw1_n_mat_lim__ = n;
            for (size_t n_mat__ = 0; n_mat__ < gamma_rw1_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < gamma_rw1_m_mat_lim__; ++m_mat__) {
                    gamma_rw1(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 279;
            validate_non_negative_index("gamma_rw2", "k_rw2", k_rw2);
            validate_non_negative_index("gamma_rw2", "n", n);
            context__.validate_dims("data initialization", "gamma_rw2", "matrix_d", context__.to_vec(k_rw2,n));
            validate_non_negative_index("gamma_rw2", "k_rw2", k_rw2);
            validate_non_negative_index("gamma_rw2", "n", n);
            gamma_rw2 = matrix_d(static_cast<Eigen::VectorXd::Index>(k_rw2),static_cast<Eigen::VectorXd::Index>(n));
            vals_r__ = context__.vals_r("gamma_rw2");
            pos__ = 0;
            size_t gamma_rw2_m_mat_lim__ = k_rw2;
            size_t gamma_rw2_n_mat_lim__ = n;
            for (size_t n_mat__ = 0; n_mat__ < gamma_rw2_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < gamma_rw2_m_mat_lim__; ++m_mat__) {
                    gamma_rw2(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 251;
            check_greater_or_equal(function__,"k_fixed",k_fixed,0);
            current_statement_begin__ = 252;
            check_greater_or_equal(function__,"k_rw1",k_rw1,0);
            current_statement_begin__ = 253;
            check_greater_or_equal(function__,"k_rw2",k_rw2,0);
            current_statement_begin__ = 254;
            check_greater_or_equal(function__,"m",m,0);
            current_statement_begin__ = 255;
            check_greater_or_equal(function__,"k",k,0);
            current_statement_begin__ = 256;
            check_greater_or_equal(function__,"n",n,0);
            current_statement_begin__ = 257;
            current_statement_begin__ = 258;
            current_statement_begin__ = 259;
            current_statement_begin__ = 260;
            check_greater_or_equal(function__,"sigma_y_mean",sigma_y_mean,0);
            current_statement_begin__ = 261;
            check_greater_or_equal(function__,"sigma_y_sd",sigma_y_sd,0);
            current_statement_begin__ = 263;
            current_statement_begin__ = 264;
            current_statement_begin__ = 265;
            current_statement_begin__ = 266;
            check_greater_or_equal(function__,"beta_fixed_sd",beta_fixed_sd,0);
            current_statement_begin__ = 267;
            check_greater_or_equal(function__,"beta_rw1_sd",beta_rw1_sd,0);
            current_statement_begin__ = 268;
            check_greater_or_equal(function__,"beta_rw2_sd",beta_rw2_sd,0);
            current_statement_begin__ = 270;
            current_statement_begin__ = 271;
            current_statement_begin__ = 272;
            check_greater_or_equal(function__,"sigma_rw1_sd",sigma_rw1_sd,0);
            current_statement_begin__ = 273;
            check_greater_or_equal(function__,"sigma_rw2_sd",sigma_rw2_sd,0);
            current_statement_begin__ = 275;
            check_greater_or_equal(function__,"slope_mean",slope_mean,0);
            current_statement_begin__ = 276;
            check_greater_or_equal(function__,"slope_sd",slope_sd,0);
            current_statement_begin__ = 277;
            current_statement_begin__ = 278;
            current_statement_begin__ = 279;
            // initialize data variables
            current_statement_begin__ = 283;
            validate_non_negative_index("a1", "m", m);
            a1 = vector_d(static_cast<Eigen::VectorXd::Index>(m));
            stan::math::fill(a1,DUMMY_VAR__);
            current_statement_begin__ = 284;
            validate_non_negative_index("P1", "m", m);
            validate_non_negative_index("P1", "m", m);
            P1 = matrix_d(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
            stan::math::fill(P1,DUMMY_VAR__);
            stan::math::assign(P1,rep_matrix(0.0,m,m));
            current_statement_begin__ = 285;
            validate_non_negative_index("Tt", "m", m);
            validate_non_negative_index("Tt", "m", m);
            Tt = matrix_d(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
            stan::math::fill(Tt,DUMMY_VAR__);
            stan::math::assign(Tt,diag_matrix(rep_vector(1.0,m)));
            current_statement_begin__ = 286;
            validate_non_negative_index("gamma2_y", "n", n);
            gamma2_y = vector_d(static_cast<Eigen::VectorXd::Index>(n));
            stan::math::fill(gamma2_y,DUMMY_VAR__);
            stan::math::assign(gamma2_y,elt_multiply(gamma_y,gamma_y));

            current_statement_begin__ = 288;
            stan::model::assign(Tt, 
                        stan::model::cons_list(stan::model::index_min_max((k_rw1 + 1), k), stan::model::cons_list(stan::model::index_min_max((k + 1), m), stan::model::nil_index_list())), 
                        diag_matrix(rep_vector(1.0,k_rw2)), 
                        "assigning variable Tt");
            current_statement_begin__ = 290;
            for (int i = 1; i <= k_rw1; ++i) {

                current_statement_begin__ = 291;
                stan::model::assign(a1, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            beta_rw1_mean, 
                            "assigning variable a1");
                current_statement_begin__ = 292;
                stan::model::assign(P1, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            pow(beta_rw1_sd,2), 
                            "assigning variable P1");
            }
            current_statement_begin__ = 294;
            for (int i = (k_rw1 + 1); i <= k; ++i) {

                current_statement_begin__ = 295;
                stan::model::assign(a1, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            beta_rw2_mean, 
                            "assigning variable a1");
                current_statement_begin__ = 296;
                stan::model::assign(P1, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            pow(beta_rw2_sd,2), 
                            "assigning variable P1");
            }
            current_statement_begin__ = 298;
            for (int i = (k + 1); i <= m; ++i) {

                current_statement_begin__ = 299;
                stan::model::assign(a1, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            slope_mean, 
                            "assigning variable a1");
                current_statement_begin__ = 300;
                stan::model::assign(P1, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            pow(slope_sd,2), 
                            "assigning variable P1");
            }

            // validate transformed data
            current_statement_begin__ = 283;
            current_statement_begin__ = 284;
            current_statement_begin__ = 285;
            current_statement_begin__ = 286;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 306;
            validate_non_negative_index("beta_fixed", "k_fixed", k_fixed);
            num_params_r__ += k_fixed;
            current_statement_begin__ = 307;
            validate_non_negative_index("sigma_rw1", "k_rw1", k_rw1);
            num_params_r__ += k_rw1;
            current_statement_begin__ = 308;
            validate_non_negative_index("sigma_rw2", "k_rw2", k_rw2);
            num_params_r__ += k_rw2;
            current_statement_begin__ = 309;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_walker_lm() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("beta_fixed")))
            throw std::runtime_error("variable beta_fixed missing");
        vals_r__ = context__.vals_r("beta_fixed");
        pos__ = 0U;
        validate_non_negative_index("beta_fixed", "k_fixed", k_fixed);
        context__.validate_dims("initialization", "beta_fixed", "vector_d", context__.to_vec(k_fixed));
        vector_d beta_fixed(static_cast<Eigen::VectorXd::Index>(k_fixed));
        for (int j1__ = 0U; j1__ < k_fixed; ++j1__)
            beta_fixed(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(beta_fixed);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_fixed: ") + e.what());
        }

        if (!(context__.contains_r("sigma_rw1")))
            throw std::runtime_error("variable sigma_rw1 missing");
        vals_r__ = context__.vals_r("sigma_rw1");
        pos__ = 0U;
        validate_non_negative_index("sigma_rw1", "k_rw1", k_rw1);
        context__.validate_dims("initialization", "sigma_rw1", "double", context__.to_vec(k_rw1));
        std::vector<double> sigma_rw1(k_rw1,double(0));
        for (int i0__ = 0U; i0__ < k_rw1; ++i0__)
            sigma_rw1[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < k_rw1; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sigma_rw1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_rw1: ") + e.what());
        }

        if (!(context__.contains_r("sigma_rw2")))
            throw std::runtime_error("variable sigma_rw2 missing");
        vals_r__ = context__.vals_r("sigma_rw2");
        pos__ = 0U;
        validate_non_negative_index("sigma_rw2", "k_rw2", k_rw2);
        context__.validate_dims("initialization", "sigma_rw2", "double", context__.to_vec(k_rw2));
        std::vector<double> sigma_rw2(k_rw2,double(0));
        for (int i0__ = 0U; i0__ < k_rw2; ++i0__)
            sigma_rw2[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < k_rw2; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sigma_rw2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_rw2: ") + e.what());
        }

        if (!(context__.contains_r("sigma_y")))
            throw std::runtime_error("variable sigma_y missing");
        vals_r__ = context__.vals_r("sigma_y");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_y", "double", context__.to_vec());
        double sigma_y(0);
        sigma_y = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_y);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_y: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta_fixed;
            (void) beta_fixed;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_fixed = in__.vector_constrain(k_fixed,lp__);
            else
                beta_fixed = in__.vector_constrain(k_fixed);

            vector<local_scalar_t__> sigma_rw1;
            size_t dim_sigma_rw1_0__ = k_rw1;
            sigma_rw1.reserve(dim_sigma_rw1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_sigma_rw1_0__; ++k_0__) {
                if (jacobian__)
                    sigma_rw1.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    sigma_rw1.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> sigma_rw2;
            size_t dim_sigma_rw2_0__ = k_rw2;
            sigma_rw2.reserve(dim_sigma_rw2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_sigma_rw2_0__; ++k_0__) {
                if (jacobian__)
                    sigma_rw2.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    sigma_rw2.push_back(in__.scalar_lb_constrain(0));
            }

            local_scalar_t__ sigma_y;
            (void) sigma_y;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_y = in__.scalar_lb_constrain(0,lp__);
            else
                sigma_y = in__.scalar_lb_constrain(0);


            // transformed parameters
            current_statement_begin__ = 313;
            validate_non_negative_index("Rt", "n", n);
            validate_non_negative_index("Rt", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Rt(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(m));
            (void) Rt;  // dummy to suppress unused var warning

            stan::math::initialize(Rt, DUMMY_VAR__);
            stan::math::fill(Rt,DUMMY_VAR__);
            stan::math::assign(Rt,rep_matrix(0.0,n,m));
            current_statement_begin__ = 314;
            validate_non_negative_index("xbeta", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  xbeta(static_cast<Eigen::VectorXd::Index>(n));
            (void) xbeta;  // dummy to suppress unused var warning

            stan::math::initialize(xbeta, DUMMY_VAR__);
            stan::math::fill(xbeta,DUMMY_VAR__);
            current_statement_begin__ = 315;
            validate_non_negative_index("y_", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  y_(static_cast<Eigen::VectorXd::Index>(n));
            (void) y_;  // dummy to suppress unused var warning

            stan::math::initialize(y_, DUMMY_VAR__);
            stan::math::fill(y_,DUMMY_VAR__);


            current_statement_begin__ = 317;
            if (as_bool(logical_gt(k_fixed,0))) {

                current_statement_begin__ = 318;
                stan::math::assign(xbeta, multiply(xreg_fixed,beta_fixed));
            } else {

                current_statement_begin__ = 320;
                stan::math::assign(xbeta, rep_vector(0.0,n));
            }
            current_statement_begin__ = 322;
            stan::math::assign(y_, subtract(y,xbeta));
            current_statement_begin__ = 323;
            for (int t = 1; t <= n; ++t) {

                current_statement_begin__ = 324;
                for (int i = 1; i <= k_rw1; ++i) {

                    current_statement_begin__ = 325;
                    stan::model::assign(Rt, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                pow((get_base1(gamma_rw1,i,t,"gamma_rw1",1) * get_base1(sigma_rw1,i,"sigma_rw1",1)),2), 
                                "assigning variable Rt");
                }
                current_statement_begin__ = 327;
                for (int i = 1; i <= k_rw2; ++i) {

                    current_statement_begin__ = 328;
                    stan::model::assign(Rt, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni((k + i)), stan::model::nil_index_list())), 
                                pow((get_base1(gamma_rw2,i,t,"gamma_rw2",1) * get_base1(sigma_rw2,i,"sigma_rw2",1)),2), 
                                "assigning variable Rt");
                }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < n; ++i0__) {
                for (int i1__ = 0; i1__ < m; ++i1__) {
                    if (stan::math::is_uninitialized(Rt(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Rt" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < n; ++i0__) {
                if (stan::math::is_uninitialized(xbeta(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: xbeta" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < n; ++i0__) {
                if (stan::math::is_uninitialized(y_(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: y_" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 313;
            current_statement_begin__ = 314;
            current_statement_begin__ = 315;

            // model body

            current_statement_begin__ = 334;
            lp_accum__.add(normal_log<propto__>(sigma_y, sigma_y_mean, sigma_y_sd));
            current_statement_begin__ = 335;
            lp_accum__.add(normal_log<propto__>(beta_fixed, beta_fixed_mean, beta_fixed_sd));
            current_statement_begin__ = 336;
            lp_accum__.add(normal_log<propto__>(sigma_rw1, sigma_rw1_mean, sigma_rw1_sd));
            current_statement_begin__ = 337;
            lp_accum__.add(normal_log<propto__>(sigma_rw2, sigma_rw2_mean, sigma_rw2_sd));
            current_statement_begin__ = 339;
            lp_accum__.add(gaussian_filter(y_,a1,P1,pow(sigma_y,2),Tt,Rt,xreg_rw,gamma2_y, pstream__));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_fixed");
        names__.push_back("sigma_rw1");
        names__.push_back("sigma_rw2");
        names__.push_back("sigma_y");
        names__.push_back("Rt");
        names__.push_back("xbeta");
        names__.push_back("y_");
        names__.push_back("y_rep");
        names__.push_back("beta_rw");
        names__.push_back("slope");
        names__.push_back("y_fit");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(k_fixed);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k_rw1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k_rw2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k_rw2);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_walker_lm_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d beta_fixed = in__.vector_constrain(k_fixed);
        vector<double> sigma_rw1;
        size_t dim_sigma_rw1_0__ = k_rw1;
        for (size_t k_0__ = 0; k_0__ < dim_sigma_rw1_0__; ++k_0__) {
            sigma_rw1.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> sigma_rw2;
        size_t dim_sigma_rw2_0__ = k_rw2;
        for (size_t k_0__ = 0; k_0__ < dim_sigma_rw2_0__; ++k_0__) {
            sigma_rw2.push_back(in__.scalar_lb_constrain(0));
        }
        double sigma_y = in__.scalar_lb_constrain(0);
            for (int k_0__ = 0; k_0__ < k_fixed; ++k_0__) {
            vars__.push_back(beta_fixed[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < k_rw1; ++k_0__) {
            vars__.push_back(sigma_rw1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < k_rw2; ++k_0__) {
            vars__.push_back(sigma_rw2[k_0__]);
            }
        vars__.push_back(sigma_y);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 313;
            validate_non_negative_index("Rt", "n", n);
            validate_non_negative_index("Rt", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Rt(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(m));
            (void) Rt;  // dummy to suppress unused var warning

            stan::math::initialize(Rt, DUMMY_VAR__);
            stan::math::fill(Rt,DUMMY_VAR__);
            stan::math::assign(Rt,rep_matrix(0.0,n,m));
            current_statement_begin__ = 314;
            validate_non_negative_index("xbeta", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  xbeta(static_cast<Eigen::VectorXd::Index>(n));
            (void) xbeta;  // dummy to suppress unused var warning

            stan::math::initialize(xbeta, DUMMY_VAR__);
            stan::math::fill(xbeta,DUMMY_VAR__);
            current_statement_begin__ = 315;
            validate_non_negative_index("y_", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  y_(static_cast<Eigen::VectorXd::Index>(n));
            (void) y_;  // dummy to suppress unused var warning

            stan::math::initialize(y_, DUMMY_VAR__);
            stan::math::fill(y_,DUMMY_VAR__);


            current_statement_begin__ = 317;
            if (as_bool(logical_gt(k_fixed,0))) {

                current_statement_begin__ = 318;
                stan::math::assign(xbeta, multiply(xreg_fixed,beta_fixed));
            } else {

                current_statement_begin__ = 320;
                stan::math::assign(xbeta, rep_vector(0.0,n));
            }
            current_statement_begin__ = 322;
            stan::math::assign(y_, subtract(y,xbeta));
            current_statement_begin__ = 323;
            for (int t = 1; t <= n; ++t) {

                current_statement_begin__ = 324;
                for (int i = 1; i <= k_rw1; ++i) {

                    current_statement_begin__ = 325;
                    stan::model::assign(Rt, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                pow((get_base1(gamma_rw1,i,t,"gamma_rw1",1) * get_base1(sigma_rw1,i,"sigma_rw1",1)),2), 
                                "assigning variable Rt");
                }
                current_statement_begin__ = 327;
                for (int i = 1; i <= k_rw2; ++i) {

                    current_statement_begin__ = 328;
                    stan::model::assign(Rt, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni((k + i)), stan::model::nil_index_list())), 
                                pow((get_base1(gamma_rw2,i,t,"gamma_rw2",1) * get_base1(sigma_rw2,i,"sigma_rw2",1)),2), 
                                "assigning variable Rt");
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 313;
            current_statement_begin__ = 314;
            current_statement_begin__ = 315;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_1__ = 0; k_1__ < m; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n; ++k_0__) {
                vars__.push_back(Rt(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(xbeta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(y_[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 344;
            validate_non_negative_index("y_rep", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  y_rep(static_cast<Eigen::VectorXd::Index>(n));
            (void) y_rep;  // dummy to suppress unused var warning

            stan::math::initialize(y_rep, DUMMY_VAR__);
            stan::math::fill(y_rep,DUMMY_VAR__);
            current_statement_begin__ = 345;
            validate_non_negative_index("beta_rw", "k", k);
            validate_non_negative_index("beta_rw", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  beta_rw(static_cast<Eigen::VectorXd::Index>(k),static_cast<Eigen::VectorXd::Index>(n));
            (void) beta_rw;  // dummy to suppress unused var warning

            stan::math::initialize(beta_rw, DUMMY_VAR__);
            stan::math::fill(beta_rw,DUMMY_VAR__);
            current_statement_begin__ = 346;
            validate_non_negative_index("slope", "k_rw2", k_rw2);
            validate_non_negative_index("slope", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  slope(static_cast<Eigen::VectorXd::Index>(k_rw2),static_cast<Eigen::VectorXd::Index>(n));
            (void) slope;  // dummy to suppress unused var warning

            stan::math::initialize(slope, DUMMY_VAR__);
            stan::math::fill(slope,DUMMY_VAR__);
            current_statement_begin__ = 347;
            validate_non_negative_index("y_fit", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  y_fit(static_cast<Eigen::VectorXd::Index>(n));
            (void) y_fit;  // dummy to suppress unused var warning

            stan::math::initialize(y_fit, DUMMY_VAR__);
            stan::math::fill(y_fit,DUMMY_VAR__);


            current_statement_begin__ = 351;
            for (int i = 1; i <= k_rw1; ++i) {

                current_statement_begin__ = 352;
                stan::model::assign(beta_rw, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            normal_rng(beta_rw1_mean,beta_rw1_sd, base_rng__), 
                            "assigning variable beta_rw");
            }
            current_statement_begin__ = 354;
            for (int i = 1; i <= k_rw2; ++i) {

                current_statement_begin__ = 355;
                stan::model::assign(beta_rw, 
                            stan::model::cons_list(stan::model::index_uni((k_rw1 + i)), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            normal_rng(beta_rw2_mean,beta_rw2_sd, base_rng__), 
                            "assigning variable beta_rw");
                current_statement_begin__ = 356;
                stan::model::assign(slope, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            normal_rng(slope_mean,slope_sd, base_rng__), 
                            "assigning variable slope");
            }
            current_statement_begin__ = 359;
            for (int t = 1; t <= (n - 1); ++t) {

                current_statement_begin__ = 360;
                for (int i = 1; i <= k_rw1; ++i) {

                    current_statement_begin__ = 361;
                    stan::model::assign(beta_rw, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((t + 1)), stan::model::nil_index_list())), 
                                stan::model::deep_copy(normal_rng(get_base1(beta_rw,i,t,"beta_rw",1),(get_base1(gamma_rw1,i,t,"gamma_rw1",1) * get_base1(sigma_rw1,i,"sigma_rw1",1)), base_rng__)), 
                                "assigning variable beta_rw");
                }
                current_statement_begin__ = 363;
                for (int i = 1; i <= k_rw2; ++i) {

                    current_statement_begin__ = 364;
                    stan::model::assign(beta_rw, 
                                stan::model::cons_list(stan::model::index_uni((k_rw1 + i)), stan::model::cons_list(stan::model::index_uni((t + 1)), stan::model::nil_index_list())), 
                                stan::model::deep_copy((get_base1(beta_rw,(k_rw1 + i),t,"beta_rw",1) + get_base1(slope,i,t,"slope",1))), 
                                "assigning variable beta_rw");
                    current_statement_begin__ = 365;
                    stan::model::assign(slope, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((t + 1)), stan::model::nil_index_list())), 
                                stan::model::deep_copy(normal_rng(get_base1(slope,i,t,"slope",1),(get_base1(gamma_rw2,i,t,"gamma_rw2",1) * get_base1(sigma_rw2,i,"sigma_rw2",1)), base_rng__)), 
                                "assigning variable slope");
                }
            }
            current_statement_begin__ = 369;
            for (int t = 1; t <= n; ++t) {

                current_statement_begin__ = 370;
                stan::model::assign(y_rep, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            normal_rng(dot_product(stan::model::rvalue(xreg_rw, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg_rw"),stan::model::rvalue(beta_rw, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "beta_rw")),(get_base1(gamma_y,t,"gamma_y",1) * sigma_y), base_rng__), 
                            "assigning variable y_rep");
            }
            {
            current_statement_begin__ = 374;
            validate_non_negative_index("states", "m", m);
            validate_non_negative_index("states", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  states(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(n));
            (void) states;  // dummy to suppress unused var warning

            stan::math::initialize(states, DUMMY_VAR__);
            stan::math::fill(states,DUMMY_VAR__);
            stan::math::assign(states,gaussian_smoother(subtract(y_,y_rep),a1,P1,pow(sigma_y,2),Tt,Rt,xreg_rw,gamma2_y, pstream__));


            current_statement_begin__ = 376;
            stan::math::assign(beta_rw, add(beta_rw, stan::model::rvalue(states, stan::model::cons_list(stan::model::index_min_max(1, k), stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::nil_index_list())), "states")));
            current_statement_begin__ = 377;
            stan::math::assign(slope, add(slope, stan::model::rvalue(states, stan::model::cons_list(stan::model::index_min_max((k + 1), m), stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::nil_index_list())), "states")));
            }
            current_statement_begin__ = 381;
            for (int t = 1; t <= n; ++t) {

                current_statement_begin__ = 382;
                stan::model::assign(y_fit, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (get_base1(xbeta,t,"xbeta",1) + dot_product(stan::model::rvalue(xreg_rw, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "xreg_rw"),stan::model::rvalue(beta_rw, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "beta_rw"))), 
                            "assigning variable y_fit");
                current_statement_begin__ = 383;
                stan::model::assign(y_rep, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            normal_rng(get_base1(y_fit,t,"y_fit",1),(get_base1(gamma_y,t,"gamma_y",1) * sigma_y), base_rng__), 
                            "assigning variable y_rep");
            }

            // validate generated quantities
            current_statement_begin__ = 344;
            current_statement_begin__ = 345;
            current_statement_begin__ = 346;
            current_statement_begin__ = 347;

            // write generated quantities
            for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(y_rep[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < n; ++k_1__) {
                for (int k_0__ = 0; k_0__ < k; ++k_0__) {
                vars__.push_back(beta_rw(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < n; ++k_1__) {
                for (int k_0__ = 0; k_0__ < k_rw2; ++k_0__) {
                vars__.push_back(slope(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(y_fit[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_walker_lm";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= k_fixed; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_fixed" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= k_rw1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_rw1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= k_rw2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_rw2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_y";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Rt" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xbeta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_rw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= k_rw2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "slope" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_fit" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= k_fixed; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_fixed" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= k_rw1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_rw1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= k_rw2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_rw2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_y";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Rt" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xbeta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_rw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= k_rw2; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "slope" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_fit" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_walker_lm_namespace::model_walker_lm stan_model;


#endif
